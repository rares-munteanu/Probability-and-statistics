vec <- randu
View(vec)
View(vec)
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second")
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third")
scatter.smooth(x=randu$x, y=randu$z, main="First ~ Third")
cars
scatter.smooth(x=cars$speed, y=cars$dist, main ="Dist~Speed")
plot(cars$speed,cars$dist)
#x <- 1:10
#y <- c(2,3,5,4,3,4,2,3,1,7)
#scatter.smooth(x,y)
cor(cars$speed,cars$dist)
linearMod <- lm(dist~speed,data=cars) #build linear regresion
#linearMod <- lm(dist~speed +x1 +x2 ,data=cars) # progresie liniara multipla
# stelutele din summary semnifica gradul de relevanta in constructia progresiei
print(linearMod)
summary(linearMod)
scatter.smooth(x=cars$speed, y=cars$dist, main ="Dist~Speed")
vec <- randu
vecx <- vec[,1]
vecy <- vec[,2]
vecz <- vec[,3]
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second")
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third")
scatter.smooth(x=randu$x, y=randu$z, main="First ~ Third")
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second")
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third")
scatter.smooth(x=randu$x, y=randu$z, main="First ~ Third")
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third")
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col="red")
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third",col="magenta")
scatter.smooth(x=randu$x, y=randu$z, main="First ~ Third",col="green")
scatter.smooth(x=randu$x, y=randu$z, main="First ~ Third",col="blue")
linearMod <- lm(dist~speed,data=cars) #build linear regresion
#x <- 1:10
#y <- c(2,3,5,4,3,4,2,3,1,7)
#scatter.smooth(x,y)
cor(cars$speed,cars$dist)
linearMod <- lm(dist~speed,data=cars) #build linear regresion
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main ="Dist~Speed")
plot(cars$speed,cars$dist)
scatter.smooth(x=cars$speed, y=cars$dist, main ="Dist~Speed")
source('C:/Users/rares/Desktop/Randu/randu_Exercise2.r', echo=TRUE)
vec <- randu
vec <- randu
scatter.smooth(x=randu$y, y=randu$z, main="Second ~ Third",col="magenta")
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col="red")
cor(vecx,vecy)
#x <- 1:10
#y <- c(2,3,5,4,3,4,2,3,1,7)
#scatter.smooth(x,y)
cor(cars$speed,cars$dist)
cor(vecx,vecy)
cor(vecx,vecz)
cor(vecy,vecz)
cor(vecx,vecy,vecz)
cor(vecx,vecy)
cor(vec)
scatterplot3d::scatterplot3d(randu[,1], randu[,2], randu[,3],angle=154)
install.packages("scatterplot3d")
scatterplot3d::scatterplot3d(randu[,1], randu[,2], randu[,3],angle=154)
bplotZ <- boxplot(vecz,col="blue")
bplotY <- boxplot(vecy,col="green")
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red","blue"))
plot(randu,col=c("red","blue"))
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red","blue"))
#variabila raspuns e x iar cea predictor e y
cor(vecx,vecy)
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red","blue"))
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red"))
#datele sunt imprastiate uniform, corelatia este foarte mica
linearMod = lm(vecy,vecx)
#datele sunt imprastiate uniform, corelatia este foarte mica
linearMod = lm(randu$y ~ randu$x, randu)
summary(linearMod)
linearMod1 = lm(randu$x ~ randu$y, randu)
summary(linearMod1)
trainingRowIndex <- sample(1:nrow(randu), 0.8 *nrow(randu))
trainingData <- randu[trainingRowIndex,]
testData <- randu[-trainingRowIndex,]
#datele sunt imprastiate uniform, corelatia este foarte mica
linearMod = lm(randu$y ~ randu$x, trainingData)
predictions <- predict(linearMod, testData)
actual_pred <- data.frame(cbind(actuals = trainingData$y,predictions))
View(actual_pred)
actual_pred <- data.frame(cbind(actuals = testData$y,predictions))
trainingRowIndex <- sample(1:nrow(randu), 0.8 *nrow(randu))
trainingData <- randu[trainingRowIndex,]
testData <- randu[-trainingRowIndex,]
#datele sunt imprastiate uniform, corelatia este foarte mica
linearMod = lm(randu$y ~ randu$x, trainingData)
predictions <- predict(linearMod, testData)
actual_pred <- data.frame(cbind(actuals = testData$y,predictions))
View(actual_pred)
View(testData)
View(trainingData)
predictions <- predict(linearMod, testData)
predictions <- predict(linearMod, testData)
linearMod = lm(y ~ x, trainingData)
predictions <- predict(linearMod, testData)
actual_pred <- data.frame(cbind(actuals = testData$y,predictions))
View(actual_pred)
correlation_accuracy <- cor(actuals_pred)
correlation_accuracy <- cor(actual_pred)
correlation_accuracy
actual_pred <- data.frame(cbind(actualsY = testData$y,predictedY=predictions))
correlation_accuracy <- cor(actual_pred)
View(actual_pred)
#variabila raspuns e y iar cea predictor e x
cor(vecx,vecy)
summary(linearMod)
plot(vecx,vecy)
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red"))
plot(vecx,vecy)
scatter.smooth(x=randu$x, y=randu$y, main="First ~ Second",col=c("red"))
plot(vecx,vecy)
plot(vecx,vecy)\
plot(vecx,vecy)
scatterplot3d::scatterplot3d(randu[,1], randu[,2], randu[,3],angle=154)
#variabila raspuns e z iar cele predictor sunt x si y
cor(vec)
linearModMultipla <- lm(z~y+x,trainingData)
summary(linearModMultipla)
actual_pred_Multipla <- data.frame(cbind(actualZ = testData$z, predictedZ = predictionsMultipla))
predictionsMultipla <- predict(linearModMultipla, testData)
actual_pred_Multipla <- data.frame(cbind(actualZ = testData$z, predictedZ = predictionsMultipla))
View(actual_pred_Multipla)
correlation_accuracyMultipla <- cor(actual_pred_Multipla)
correlation_accuracyMultipla
summary(linearModMultipla)
View(vec)
rnorm(100)
rnorm(100,5,23)
runif(400,0,sqrt(3))
origDist <- runif(400,0,sqrt(3))
origDist
set.seed(100)
origDist <- runif(400,0,sqrt(3))
origDist
dataFrameNew <- data.frame(cbind(randu,dist = origDist))
dataFrameNew
cor(dataFrameNew)
lmDist <- lm(dist~x+y+z, dataFrameNew)
View(lmDist)
summary(lmDist)
vex <- dataFrameNew$dist[*2]
vx <- dataFrameNew[dataFrameNew$x * 2]
View(vx)
scatter.smooth(x=vecx, y=vecy, main="First ~ Second",col=c("red"))
plot(vecx,vecy)
scatter.smooth(x=vecx, y=vecy, main="First ~ Second",col=c("red"))
vx <- dataFrameNew[dataFrameNew[] * 2]
calculatedOrigDist <- vector("number",400)
calculatedOrigDist <- vector(400)
calculatedOrigDist
?vector
calculatedOrigDist <- vector("numeric",400)
calculatedOrigDist[row] <- x*x+y*y+z*z
for(row in 1:rand(randu)){
x <- rand[row,"x"]
y <- rand[row,"y"]
z <- rand[row,"z"]
calculatedOrigDist[row] <- x*x+y*y+z*z
}
for(row in 1:nrow(randu)){
x <- randu[row,"x"]
y <- randu[row,"y"]
z <- randu[row,"z"]
calculatedOrigDist[row] <- x*x+y*y+z*z
}
calculatedOrigDist
for(row in 1:nrow(randu)){
x <- randu[row,"x"]
y <- randu[row,"y"]
z <- randu[row,"z"]
calculatedOrigDist[row] <- sqrt(x*x+y*y+z*z)
}
calculatedOrigDist
View(vec)
dataFrameNew2 <- data.frame(cbind(randu,dist = calculatedOrigDist))
lmDist2 <- lm(dist~x+y+z, dataFrameNew2)
summary(lmDist2)
trainingRowIndex2 <- sample(1:nrow(randu), 0.8*nrow(randu))
trainingValues <- dataFrameNew2[trainingRowIndex2,]
testingValues <- dataFrameNew2[-trainingRowIndex2,]
lmDist2 <- lm(dist~x+y+z, trainingValues)
predictionsRaza <- predict(lmDist2, testingValues)
actualR_predR <- data.frame(cbind(actualR = testingValues$dist, predictedR = predictionsRaza))
View(actualR_predR)
cor(actualR_predR)
v <- rcauchy(100)
v <- rcauchy(100)
hist(v)
hist(v,color="red")
plot(t,dunif(t,2,3),col="magenta")
plot(t,dunif(t,2,3),col="magenta")
plot(t,punif(t,2,4),col="magenta")
t <- seq(-4,14,0.001)
plot(t,dunif(t,2,3),col="magenta")
plot(t,punif(t,2,4),col="magenta")
x <- runif(1000000,2,4)
plot(t1,dexp(t1,lambda),col="beige")
plot(t1,dexp(t1,1/5),col="beige")
plot(t1,dexp(t1,2),col="beige")
plot(t1,dexp(t1,10),col="beige")
#desene in paralel
t1 <- seq(-4,14,0.001)
lambda <- 1
plot(t1,dexp(t1,lambda),col="beige")
plot(t1,dexp(t1,1/5),col="beige")
plot(t1,dexp(t1,2),col="beige")
plot(t1,dexp(t1,10),col="beige")
plot(t1,dexp(t1,2),col="beige")
#desene suprapuse
plot(t1,dexp(t1,lambda),col="beige")
#desene suprapuse
lines(t1,dexp(t1,1/5),col="red")
lines(t1,dexp(t1,2),col="blue")
lines(t1,dexp(t1,10),col="green")
lines(t2,dnorm(t2,2,1),col="green")
t2 <- seq(-5,5,0.001)
plot(t2,dnorm(t2,0,1))
lines(t2,dnorm(t2,2,1),col="green")
lines(t2,dnorm(t2,4,1),col="magenta")
plot(v,dcauchy(v))
plot(v
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
plot(v)
v <- rcauchy(100)
plot(v)
plot(v)
plot(v, dcauchy(v))
plot(v, dcauchy(v))
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
v <- rcauchy(100)
plot(v, dcauchy(v))
?plot
plot(v, dcauchy(v))
dcauchy(-20)
plot(v, pcauchy(v))
plot(v, pcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
v <- rcauchy(200)
plot(v, dcauchy(v), col="red")
plot(v, pcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
plot(v, pcauchy(v), col="red")
lines(v, pcauchy(v), col="red")
plot(v, pcauchy(v), col="red")
plot(v, dcauchy(v), col="red")
?plot
plot(v, dcauchy(v), col="red", main="Functia de densitate")
plot(v, pcauchy(v), col="red", main="Functia de repartitie")
plot(v, dcauchy(v), col="red", main="Functia de densitate")
t2 <- seq(-5,5,0.001)
plot(t2,dnorm(t2,0,1))
lines(t2,dnorm(t2,2,1),col="green")
lines(t2,dnorm(t2,4,1),col="magenta")
lines(t2,dnorm(t2,-3,1),col="blue")
plot(t2,dnorm(t2,0,1))
v <- rcauchy(20000)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
plot(v, pcauchy(v), col="red", main="Functia de repartitie")
plot(v, dcauchy(v), col="red", main="Functia de densitate")
v <- rcauchy(2000)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
plot(v, pcauchy(v), col="red", main="Functia de repartitie")
plot(v, dcauchy(v), col="red", main="Functia de densitate")
v <- rcauchy(1000)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
v <- rcauchy(500)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
v <- rcauchy(300)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
plot(v, pcauchy(v), col="red", main="Functia de repartitie")
v <- rcauchy(200)
plot(v, dcauchy(v), col="red", main="Functia de densitate")
plot(v, pcauchy(v), col="red", main="Functia de repartitie")
plot(v, dcauchy(v), col="red", main="Functia de densitate")
v <- runfi(3)
v <- runif(3)
?runif
v <- v/sum(v)
